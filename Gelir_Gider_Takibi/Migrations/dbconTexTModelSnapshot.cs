// <auto-generated />
using Gelir_Gider_Takibi.DBConTexT;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gelir_Gider_Takibi.Migrations
{
    [DbContext(typeof(dbconTexT))]
    partial class dbconTexTModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gelir_Gider_Takibi.EnTiTy.CaTegory", b =>
                {
                    b.Property<int>("caTegoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("caTegoryID"));

                    b.Property<string>("caTegoryname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("caTegoryID");

                    b.ToTable("caTegory");
                });

            modelBuilder.Entity("Gelir_Gider_Takibi.EnTiTy.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ThisMonThSalary", b =>
                {
                    b.Property<int>("monThID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("monThID"));

                    b.Property<string>("monThname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("monThID");

                    b.HasIndex("userID");

                    b.ToTable("ThismonThsalary");
                });

            modelBuilder.Entity("ThisMonThSalarySpending", b =>
                {
                    b.Property<int>("salaryspendingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("salaryspendingID"));

                    b.Property<decimal>("amounT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("caTegoryID")
                        .HasColumnType("int");

                    b.Property<int>("monThID")
                        .HasColumnType("int");

                    b.HasKey("salaryspendingID");

                    b.HasIndex("caTegoryID");

                    b.HasIndex("monThID");

                    b.ToTable("ThismonThsalaryspending");
                });

            modelBuilder.Entity("ThisMonThSalary", b =>
                {
                    b.HasOne("Gelir_Gider_Takibi.EnTiTy.User", "User")
                        .WithMany("ThismonThsalary")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThisMonThSalarySpending", b =>
                {
                    b.HasOne("Gelir_Gider_Takibi.EnTiTy.CaTegory", "caTegory")
                        .WithMany("ThismonThsalaryspending")
                        .HasForeignKey("caTegoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThisMonThSalary", "ThisMonThSalary")
                        .WithMany("ThismonThsalaryspending")
                        .HasForeignKey("monThID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThisMonThSalary");

                    b.Navigation("caTegory");
                });

            modelBuilder.Entity("Gelir_Gider_Takibi.EnTiTy.CaTegory", b =>
                {
                    b.Navigation("ThismonThsalaryspending");
                });

            modelBuilder.Entity("Gelir_Gider_Takibi.EnTiTy.User", b =>
                {
                    b.Navigation("ThismonThsalary");
                });

            modelBuilder.Entity("ThisMonThSalary", b =>
                {
                    b.Navigation("ThismonThsalaryspending");
                });
#pragma warning restore 612, 618
        }
    }
}
